#!/bin/sh

true /*
# Shell script will interpret above as a command and execute everything after
# it, while JavaScript will interpret this as beginning of a comment and skip
# shell script contents.
#
# As shell script parses lines only when they are needed, nothing after exit 1
# can possibly cause a syntax error.

if nodepath="$(command -v node || command -v nodejs)"; then
	exec "$nodepath" "--trace-warnings" "$0" "$@"
fi
echo "We require Node.js version 8 or later; Node.js not found"
exit 1
*/;

var child_process = require('child_process');
var fs = require('fs');
var path = require('path');

// # Make sure we're Node 8+

try {
	eval('{ let a = async () => {}; }');
} catch (e) {
	console.log("We require Node.js version 8 or later; you're using " + process.version);
	process.exit(1);
}

// # Make sure our dependencies are available, and install them if they
// # aren't

try {
	require.resolve('eslint');
} catch (e) {
	console.log('Installing dependencies...');
	child_process.execSync('npm install --production', {stdio: 'inherit'});
}
